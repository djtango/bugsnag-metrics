// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Axios = require("bs-axios/src/axios.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Axios$1 = require("axios");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

var orgId = "546ca5ab77656207ea00079a";

var authToken = "token f4cf4816-c52e-4290-9263-04ca6fa60cdd";

var headers = Axios.$$Headers.fromObj({
      Authorization: authToken,
      "X-Version": "2"
    });

var bugsnag = "https://api.bugsnag.com/";

var organizations = "https://api.bugsnag.com/organizations/546ca5ab77656207ea00079a";

function isMyProject(e) {
  return true;
}

function errorRespToJs(param) {
  return {
          id: param[/* id */0],
          errorClass: param[/* errorClass */1],
          events: param[/* events */2],
          firstSeen: param[/* firstSeen */3],
          lastSeen: param[/* lastSeen */4],
          firstSeenUnfiltered: param[/* firstSeenUnfiltered */5],
          lastSeenUnfiltered: param[/* lastSeenUnfiltered */6],
          status: param[/* status */7]
        };
}

function errorRespFromJs(param) {
  return /* record */[
          /* id */param.id,
          /* errorClass */param.errorClass,
          /* events */param.events,
          /* firstSeen */param.firstSeen,
          /* lastSeen */param.lastSeen,
          /* firstSeenUnfiltered */param.firstSeenUnfiltered,
          /* lastSeenUnfiltered */param.lastSeenUnfiltered,
          /* status */param.status
        ];
}

function orgsResp(json) {
  return /* record */[/* projectsUrl */Json_decode.field("projects_url", Json_decode.string, json)];
}

function projectEvent(json) {
  return /* record */[
          /* slug */Json_decode.field("slug", Json_decode.string, json),
          /* errorsUrl */Json_decode.field("errors_url", Json_decode.string, json)
        ];
}

function projectEvents(param) {
  return Json_decode.array(projectEvent, param);
}

function errorResp(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* errorClass */Json_decode.field("error_class", Json_decode.string, json),
          /* events */Json_decode.field("events", Json_decode.$$int, json),
          /* firstSeen */Json_decode.field("first_seen", Json_decode.string, json),
          /* lastSeen */Json_decode.field("last_seen", Json_decode.string, json),
          /* firstSeenUnfiltered */Json_decode.field("first_seen_unfiltered", Json_decode.string, json),
          /* lastSeenUnfiltered */Json_decode.field("last_seen_unfiltered", Json_decode.string, json),
          /* status */Json_decode.field("status", Json_decode.string, json)
        ];
}

function errorResps(param) {
  return Json_decode.array(errorResp, param);
}

var Decode = {
  orgsResp: orgsResp,
  projectEvent: projectEvent,
  projectEvents: projectEvents,
  errorResp: errorResp,
  errorResps: errorResps
};

function httpGet(url, thenF, catchF) {
  console.log("GET:" + url);
  return Axios$1.get(url, {
                  headers: headers
                }).then((function (response) {
                  console.log("success!");
                  return Promise.resolve(Curry._1(thenF, response.data));
                })).catch((function (error) {
                return Promise.resolve(Curry._1(catchF, error));
              }));
}

function retryAfter(headers) {
  var retryAfter$1 = headers["retry-after"];
  if (retryAfter$1 == null) {
    console.log("no retry found waiting 5 seconds...");
    return 5;
  } else {
    return retryAfter$1;
  }
}

function httpGetBatch(url, params, thenF) {
  console.log("GET-batch:" + url);
  return Axios$1.get(url, {
                  headers: headers,
                  params: params
                }).then((function (response) {
                  return Promise.resolve(Curry._2(thenF, response.headers, response.data));
                })).catch((function (error) {
                var retry = function (e) {
                  if (e.response.status === 429) {
                    console.log("throttled...");
                    var retryAfter$1 = retryAfter(e.response.headers);
                    console.log("sleeping for " + (String(retryAfter$1) + " seconds..."));
                    setTimeout((function (param) {
                            httpGetBatch(url, params, thenF);
                            return /* () */0;
                          }), Caml_int32.imul(retryAfter$1, 1000));
                    return /* () */0;
                  } else {
                    console.log("something went wrong...");
                    console.log(error);
                    return /* () */0;
                  }
                };
                return Promise.resolve(retry(error));
              }));
}

function httpError(error) {
  console.log(error);
  return "error occurred";
}

function getErrorsUrl(e) {
  return e[/* errorsUrl */1];
}

var _1s = 1000;

var _1min = Caml_int32.imul(60, _1s);

var _1h = Caml_int32.imul(60, _1min);

var _1d = Caml_int32.imul(24, _1h);

var _1w = Caml_int32.imul(7, _1d);

function transformTime(f, dateString) {
  var dF = Date.parse(dateString);
  var dF2 = Curry._1(f, dF);
  return new Date(dF2).toISOString();
}

function addTime(dateString, t) {
  return transformTime((function (d) {
                return d + t;
              }), dateString);
}

function oneWeekAgo(dateString) {
  return addTime(dateString, -_1w | 0);
}

function subtract1Ms(dateString) {
  var dF = Date.parse(dateString);
  var dF2 = dF - 1;
  return new Date(dF2).toISOString();
}

function isWithinLastWeek(dateString, now) {
  return dateString >= addTime(now, -_1w | 0);
}

function isFirstSeenWithinLastWeek(errorResp) {
  var t = errorResp[/* firstSeen */3];
  var now = new Date(Date.now()).toISOString();
  return t >= addTime(now, -_1w | 0);
}

function makeParams(base) {
  return {
          base: base,
          per_page: 100,
          "filters[event.since][][type]": "eq",
          "filters[event.since][][value]": "7d"
        };
}

function nextPage(data) {
  var error = Caml_array.caml_array_get(data, data.length - 1 | 0);
  var earliestTime = error[/* lastSeen */4];
  return makeParams(subtract1Ms(earliestTime));
}

function fetchAll(url, doneF) {
  var initData = /* array */[];
  var initParams = makeParams(new Date(Date.now()).toISOString());
  var iter = function (data, params) {
    return httpGetBatch(url, params, (function (headers, d) {
                  var newData = Json_decode.array(errorResp, d);
                  var moreData = $$Array.append(data, newData);
                  var count = moreData.length;
                  var totalCount = headers["x-total-count"];
                  if (totalCount > 0) {
                    console.log("paging");
                    console.log(totalCount);
                    console.log(count);
                    iter(moreData, nextPage(moreData));
                    return /* () */0;
                  } else {
                    console.log("done");
                    Curry._1(doneF, moreData);
                    return /* () */0;
                  }
                }));
  };
  return iter(initData, initParams);
}

var compare = Caml_obj.caml_compare;

var StringId = {
  compare: compare
};

var ErrorIdMap = $$Map.Make(StringId);

function findFromLastWeek(errorResp) {
  var l = $$Array.to_list(errorResp);
  return $$Array.of_list(List.filter(isFirstSeenWithinLastWeek)(l));
}

function numberOfErrorsThisWeek(errorResps) {
  var x = findFromLastWeek(errorResps);
  return String($$Array.map(errorRespToJs, x).length);
}

function percentageErrorsSnoozed(errorResps) {
  var isSnoozed = function (status) {
    if (status === "snoozed") {
      return true;
    } else {
      return false;
    }
  };
  var totalCount = errorResps.length;
  var l = $$Array.to_list($$Array.map((function (e) {
              return e[/* status */7];
            }), errorResps));
  var snoozed = List.length(List.filter(isSnoozed)(l));
  return Pervasives.string_of_float(snoozed / totalCount * 100.0);
}

function printReport(d) {
  var errorsThisWeek = "New errors introduced this week: " + numberOfErrorsThisWeek(d);
  var totalErrors = "Total errors with events this week: " + String(d.length);
  var pc = percentageErrorsSnoozed(d);
  var errorsSnoozed = "% errors being snoozed: " + (pc + "%");
  return $$String.concat("\n", /* :: */[
              errorsThisWeek,
              /* :: */[
                totalErrors,
                /* :: */[
                  errorsSnoozed,
                  /* [] */0
                ]
              ]
            ]);
}

function main(callback) {
  console.log(new Date(Date.now()).toISOString());
  console.log("pinging bugsnag");
  return httpGet(organizations, (function (data) {
                    return orgsResp(data)[/* projectsUrl */0];
                  }), httpError).then((function (projectsUrl) {
                  return httpGet(projectsUrl, (function (data) {
                                console.log(data);
                                return List.filter(isMyProject)($$Array.to_list(Json_decode.array(projectEvent, data)));
                              }), (function (param) {
                                return /* [] */0;
                              }));
                })).then((function (projectErrorsUrls) {
                return Promise.resolve(List.map((function (url) {
                                  var makeResult = function (data) {
                                    return "Report for " + (url[/* slug */0] + (":\n" + printReport(data)));
                                  };
                                  fetchAll(url[/* errorsUrl */1], (function (x) {
                                          return Curry._1(callback, makeResult(x));
                                        }));
                                  return url;
                                }), projectErrorsUrls));
              }));
}

var fillmein = "fillmein";

var _1ms = 1;

exports.fillmein = fillmein;
exports.orgId = orgId;
exports.authToken = authToken;
exports.headers = headers;
exports.bugsnag = bugsnag;
exports.organizations = organizations;
exports.isMyProject = isMyProject;
exports.errorRespToJs = errorRespToJs;
exports.errorRespFromJs = errorRespFromJs;
exports.Decode = Decode;
exports.httpGet = httpGet;
exports.retryAfter = retryAfter;
exports.httpGetBatch = httpGetBatch;
exports.httpError = httpError;
exports.getErrorsUrl = getErrorsUrl;
exports._1ms = _1ms;
exports._1s = _1s;
exports._1min = _1min;
exports._1h = _1h;
exports._1d = _1d;
exports._1w = _1w;
exports.transformTime = transformTime;
exports.addTime = addTime;
exports.oneWeekAgo = oneWeekAgo;
exports.subtract1Ms = subtract1Ms;
exports.isWithinLastWeek = isWithinLastWeek;
exports.isFirstSeenWithinLastWeek = isFirstSeenWithinLastWeek;
exports.makeParams = makeParams;
exports.nextPage = nextPage;
exports.fetchAll = fetchAll;
exports.StringId = StringId;
exports.ErrorIdMap = ErrorIdMap;
exports.findFromLastWeek = findFromLastWeek;
exports.numberOfErrorsThisWeek = numberOfErrorsThisWeek;
exports.percentageErrorsSnoozed = percentageErrorsSnoozed;
exports.printReport = printReport;
exports.main = main;
/* headers Not a pure module */
